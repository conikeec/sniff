name: "Python Bullshit Detection Patterns"
version: "1.0.0"
language: "python"
author: "Sniff Core Team"
description: "Comprehensive bullshit detection patterns for Python code"

rules:
  - id: "python_not_implemented_error"
    name: "NotImplementedError"
    description: "Function raises NotImplementedError"
    severity: "Critical"
    pattern_type: !Regex
      pattern: "raise\\s+NotImplementedError"
    scope: "FunctionBody"
    enabled: true
    tags: ["placeholder", "incomplete"]
    examples:
      - "raise NotImplementedError()"
      - "raise NotImplementedError(\"TODO: implement this\")"
    false_positives: []

  - id: "python_pass_only_function"
    name: "Pass-Only Function"
    description: "Function contains only 'pass' statement"
    severity: "High"
    pattern_type: !Regex
      pattern: "def\\s+\\w+\\([^)]*\\):\\s*pass"
      flags: "m"
    scope: "FunctionBody"
    enabled: true
    tags: ["placeholder", "incomplete"]
    examples:
      - "def do_something():\n    pass"
      - "def calculate(x, y):\n    pass"
    false_positives:
      - "def abstract_method():\n    pass  # Abstract method"

  - id: "python_todo_comment"
    name: "TODO Comment"
    description: "TODO, FIXME, or XXX comment in code"
    severity: "Medium"
    pattern_type: !Regex
      pattern: "(?i)#\\s*(TODO|FIXME|XXX|HACK):"
      flags: "i"
    scope: "Comments"
    enabled: true
    tags: ["todo", "incomplete"]
    examples:
      - "# TODO: implement this"
      - "# FIXME: handle errors properly"
      - "# XXX: this is a hack"
    false_positives: []

  - id: "python_shortcut_comments"
    name: "AI Shortcut Comments"
    description: "Comments indicating AI took shortcuts or temporary solutions"
    severity: "Medium"
    pattern_type: !Regex
      pattern: "(?i)#\\s*(?:for now|temporary|quick fix|hack|workaround|temporary solution|quick and dirty|placeholder|stub|mock|dummy|just for now|temp|tmp)"
      flags: "i"
    scope: "Comments"
    enabled: true
    tags: ["shortcuts", "temporary", "ai_patterns"]
    examples:
      - "# For now, just return None"
      - "# Temporary solution until we implement X"
      - "# Quick fix - needs proper implementation"
      - "# Workaround for issue #123"
    false_positives: []

  - id: "python_bare_except"
    name: "Bare Except Clause"
    description: "Using bare except without specifying exception type"
    severity: "High"
    pattern_type: !Regex
      pattern: "except\\s*:"
    scope: "FunctionBody"
    enabled: true
    tags: ["exception", "bad_practice"]
    examples:
      - "except:"
      - "except: pass"
    false_positives: []

  - id: "python_eval_exec_usage"
    name: "Eval or Exec Usage"
    description: "Using eval() or exec() which can be security risks"
    severity: "Critical"
    pattern_type: !Regex
      pattern: "(?:eval|exec)\\s*\\("
    scope: "FunctionBody"
    enabled: true
    tags: ["security", "eval", "exec"]
    examples:
      - "eval(user_input)"
      - "exec(code_string)"
    false_positives: []

  - id: "python_mutable_default_args"
    name: "Mutable Default Arguments"
    description: "Using mutable objects as default function arguments"
    severity: "High"
    pattern_type: !Regex
      pattern: "def\\s+\\w+\\([^)]*=\\s*(?:\\[\\]|\\{\\}|list\\(\\)|dict\\(\\))[^)]*\\):"
    scope: "FunctionBody"
    enabled: true
    tags: ["mutable", "default_args", "bug_prone"]
    examples:
      - "def func(items=[]):"
      - "def process(data={}):"
    false_positives: []

  - id: "python_hardcoded_values"
    name: "Hardcoded Placeholder Values"
    description: "Hardcoded values with placeholder comments"
    severity: "Medium"
    pattern_type: !Regex
      pattern: "(?:=|return)\\s*(?:0|1|42|999|\"test\"|\"placeholder\"|\"dummy\"|\\[\\]|\\{\\})\\s*#.*(?i)(?:for now|temporary|placeholder|dummy|mock|hardcoded)"
      flags: "i"
    scope: "FunctionBody"
    enabled: true
    tags: ["hardcoded", "placeholder"]
    examples:
      - "return 42  # For now"
      - "value = []  # Temporary placeholder"
      - "DEFAULT = \"dummy\"  # Hardcoded for now"
    false_positives: []

metadata:
  created_at: "2025-01-13"
  updated_at: "2025-01-13"
  minimum_sniff_version: "0.1.0"