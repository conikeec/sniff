name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Sniff ${{ steps.get_version.outputs.VERSION }}
            
            Code quality analysis tool that detects AI-generated deception patterns and provides quality gates.
            
            ### Features
            - [ANALYSIS] File analysis for code quality issues and misalignment patterns
            - [VERIFY] TODO verification with quality gates
            - [CHECKPOINT] Change tracking and diff analysis
            - [PATTERNS] Extensible pattern management system
            - [MULTI-LANG] Support for Rust, Python, TypeScript, JavaScript, Go, C/C++
            
            ### Installation
            
            #### From GitHub Releases
            ```bash
            # Linux/macOS
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/sniff-${{ steps.get_version.outputs.VERSION }}-$(uname -s)-$(uname -m).tar.gz | tar xz
            sudo mv sniff /usr/local/bin/
            
            # Windows (PowerShell)
            Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/sniff-${{ steps.get_version.outputs.VERSION }}-Windows-x86_64.zip" -OutFile "sniff.zip"
            Expand-Archive -Path "sniff.zip" -DestinationPath "."
            ```
            
            #### From Homebrew
            ```bash
            brew install ${{ github.repository_owner }}/tap/sniff
            ```
            
            #### From Cargo
            ```bash
            cargo install sniff
            ```
            
            ### Usage
            ```bash
            # Analyze files for code quality issues
            sniff analyze-files src/ --format table --detailed
            
            # Verify TODO completion with quality gates
            sniff verify-todo TODO-123 --files src/auth.rs --min-quality 80
            
            # Create and manage checkpoints
            sniff checkpoint create "before-refactor" src/
            sniff checkpoint diff "before-refactor" --paths src/
            
            # Manage pattern library
            sniff patterns list
            ```
            
            See [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed documentation.
          draft: false
          prerelease: false

  build:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          case "${{ matrix.target }}" in
            "x86_64-unknown-linux-musl")
              sudo apt-get update
              sudo apt-get install -y musl-tools
              ;;
            "aarch64-unknown-linux-gnu")
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
          esac

      - name: Build binary
        run: |
          case "${{ matrix.target }}" in
            "aarch64-unknown-linux-gnu")
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              ;;
          esac
          cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          case "${{ matrix.target }}" in
            "x86_64-unknown-linux-musl"|"x86_64-unknown-linux-gnu")
              strip target/${{ matrix.target }}/release/sniff
              ;;
            "aarch64-unknown-linux-gnu")
              aarch64-linux-gnu-strip target/${{ matrix.target }}/release/sniff
              ;;
            "x86_64-apple-darwin"|"aarch64-apple-darwin")
              strip target/${{ matrix.target }}/release/sniff
              ;;
          esac

      - name: Get version from tag
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create archive
        id: create_archive
        shell: bash
        run: |
          binary_name="sniff${{ matrix.suffix }}"
          archive_name="sniff-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}"
          
          mkdir -p "$archive_name"
          cp "target/${{ matrix.target }}/release/$binary_name" "$archive_name/"
          cp README.md "$archive_name/"
          cp LICENSE "$archive_name/"
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "$archive_name.zip" "$archive_name"
            echo "ASSET_PATH=$archive_name.zip" >> $GITHUB_OUTPUT
            echo "ASSET_NAME=$archive_name.zip" >> $GITHUB_OUTPUT
          else
            tar czf "$archive_name.tar.gz" "$archive_name"
            echo "ASSET_PATH=$archive_name.tar.gz" >> $GITHUB_OUTPUT
            echo "ASSET_NAME=$archive_name.tar.gz" >> $GITHUB_OUTPUT
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.create_archive.outputs.ASSET_PATH }}
          asset_name: ${{ steps.create_archive.outputs.ASSET_NAME }}
          asset_content_type: application/octet-stream

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build]
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, 'beta') && !contains(github.ref, 'alpha') && !contains(github.ref, 'rc') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Calculate SHA256 for macOS binary
        id: calculate_sha
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          MACOS_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/sniff-${VERSION}-x86_64-apple-darwin.tar.gz"
          
          # Download and calculate SHA256
          curl -sL "$MACOS_URL" | sha256sum | cut -d' ' -f1 > sha256.txt
          echo "SHA256=$(cat sha256.txt)" >> $GITHUB_OUTPUT

      - name: Update Homebrew Tap
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          repository: ${{ github.repository_owner }}/homebrew-tap
          event-type: update-formula
          client-payload: |
            {
              "formula": "sniff",
              "version": "${{ steps.get_version.outputs.VERSION }}",
              "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/sniff-${{ steps.get_version.outputs.VERSION }}-x86_64-apple-darwin.tar.gz",
              "sha256": "${{ steps.calculate_sha.outputs.SHA256 }}",
              "description": "Code quality analysis tool that detects AI-generated deception patterns"
            }

  publish-crates-io:
    name: Publish to crates.io
    needs: build
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, 'beta') && !contains(github.ref, 'alpha') && !contains(github.ref, 'rc') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --verbose